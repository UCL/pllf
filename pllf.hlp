{smcl}
{* 18jul2007}{...}
{hi:help pllf}{right:(SJ7-3: st0132)}
{hline}

{title:Title}

{p2colset 5 13 15 2}{...}
{p2col:{hi:pllf} {hline 2}}Profile log-likelihood function{p_end}
{p2colreset}{...}


{title:Syntax}

{phang2}
{opt pllf}
{it:regression_cmd}
{it:regression_cmd_stuff}
{ifin}
{weight}
[{cmd:,} {it:options}]


{synoptset 30 tabbed}{...}
{synopthdr}
{synoptline}
{syntab :{it:Syntax 1}}
{synopt :{opt pro:file(xvarname)}}PLL is required for variable {it:xvarname}, or{p_end}
{synopt :{opt pro:file([eqname]paramname)}}PLL is required for parameter
{it:paramname} or [{opt [}{it:eqname}{opt ]}]{it:paramname}{p_end}
{syntab :{it:Syntax 2}}
{synopt :{opt form:ula(formula)}}defines a transformation involving at least
one variable in the dataset{p_end}
{synopt :{opt range(#1 #2)}}evaluates PLL over {it:#1} <= {opt X} <= {it:#2}{p_end}
{syntab :{it:Options in common}}
{synopt :{opt dev:iance}}requests -2 times PLL function{p_end}
{synopt :{opt diff:erence}}computes PLL minus maximized log likelihood{p_end}
{synopt :{opt gen(beta_var pll_var)}}creates {it:beta_var} and {it:pll_var}{p_end}
{synopt :{opt cilin:es(cline_options)}}specifies rendition of confidence interval{p_end}
{synopt :{opt gropt(cline_opts twoway_opts)}}supplies graph options to enhance PLL plot{p_end}
{synopt :{opt lev:el(#)}}sets the confidence level to {it:#}{p_end}
{synopt :{opt levlin:e(cline_options)}}specifies rendition of horizontal line{p_end}
{synopt :{opt maxc:ost(#)}}sets an upper limit of 2 x {it:#} on the additional evaluations of the PLL{p_end}
{synopt :{opt n(#)}}evaluates PLL at {it:#} equally spaced points{p_end}
{synopt :{opt noci}}suppresses calculation of PLL-based CI{p_end}
{synopt :{opt nodot:s}}suppresses dots{p_end}
{synopt :{opt nograph}}suppresses the line plot of the results{p_end}
{synopt :{opt pl:aceholder(string)}}sets the placeholder in Syntax 2 to {it:string}{p_end}
{synopt :{it:regression_cmd_options}}options appropriate to {it:regression_cmd}{p_end}


{pstd}
where, in essence, any {it:regression_cmd} for which the parameters are estimated
by maximum likelihood may be used. This includes
{help clogit},
{help cnreg},
{help glm},
{help heckman},
{help logistic},
{help logit},
{help mlogit},
{help nbreg},
{help gnbreg},
{help ologit},
{help oprobit},
{help poisson},
{help probit},
{help regress},
{help reg3},
{help stcox},
{help streg}
and
{help stpm}, and probably others.

{pstd}
All weight types supported by {it:regression_cmd} are allowed; see help
{help weight}.


{title:Description}

{pstd}
{opt pllf} has two basic syntaxes, depending on which of the options
{opt profile()} or {opt formula()} is used. Let us call these
syntaxes 1 and 2.

{pstd}
With syntax 1, {opt profile()} must be specified and {opt formula()} is
not allowed. {it:regression_cmd_stuff} typically takes the simple form
[{it:depvar}] {it:varlist}, although more complex syntax is supported
according to the needs of {it:regression_cmd}. For example, for
{it:regression_cmd} {cmd:ivreg}, {it:regression_cmd_stuff} takes the form
{it:depvar} [{it:varlist1}] {cmd:(}{it:varlist2} {cmd:=}
{it:varlist_iv}{cmd:)}.

{pstd}
{opt pllf} with the {opt profile()} option (syntax 1)
computes the profile log likelihood (PLL) function
for the regression coefficient of a covariate defined by
{cmd:profile(}{it:xvarname}{cmd:)} or a parameter or variable
defined by {cmd:profile(}[{cmd:[}{it:eqname}{cmd:]}]{it:paramname}{cmd:)}
within a model specified by {it:regression_cmd} {it:yvar} {it:xvarlist},
{it:regression_cmd_options}.
{opt pllf} also reports
PLL-based confidence limits, computed by a simple grid search.
{it:xvarname} need not be a member of {it:xvarlist}, although including
it is harmless. The results are saved to new variables assigned by the
{cmd:gen()} option.  The dataset length is increased if {cmd:n()} exceeds the
number of observations ({cmd:_N}).

{pstd}
With syntax 2, {opt formula()} and {cmd:range()}
must be specified and {opt profile()} is 
not allowed. {it:regression_cmd_stuff} is similar to that for
syntax 1, except that {it:regression_cmd_stuff} must include the
placeholder {cmd:X}. This is substituted by a variable calculated 
according to the formula defined by {opt formula()}, which must 
also include {cmd:X} at least once.

{pstd}
{opt pllf} with the {opt formula()} option (syntax 2)
computes the PLL function of a nonlinear parameter denoted
by {cmd:X}. {cmd:X} is symbolically included where necessary
in {it:regression_cmd_stuff}. In effect, {cmd:X} is replaced on the fly
by the variable created by substituting the current value of {cmd:X} in
{it:formula}. {opt pllf} reports the MLE and PLL-based confidence limits,
computed by a simple grid search. Normal-based confidence limits
are not computed. Other features are similar to
those with syntax 1.


{title:Options}

{phang}
{cmd:profile(}{it:xvarname} | [{cmd:[}{it:eqname}{cmd:]}]{it:paramname}{cmd:)}
(syntax 1) is required. In the first format,
the PLL function for the regression
coefficient for {it:xvarname} is calculated. {it:xvarname}
is a covariate in the main response model.
In the second format, the PLL function for the parameter defined
by {cmd:[}{it:eqname}{cmd:]}{it:paramname} is calculated. Typically,
{it:paramname} will be an auxiliary parameter of some kind, such as
a scale or shape parameter, with its own equation. For example,
for the Weibull model, {cmd:profile([ln_p]_cons)} would give
the PLL function for the log of the shape parameter, p.

{phang}
{opt formula(formula)} (syntax 2) is required.
{it:formula} defines
a transformation involving at least one variable in the dataset and the
parameter {cmd:X}.  {it:formula} may be any valid Stata expression, i.e.,
{cmd:formula(exp(-X*x5))}.

{phang}
{opt deviance} specifies the profile-deviance function, i.e., 
-2 times the PLL function.  If {cmd:difference} is also specified,
{cmd:deviance} produces the profile deviance difference, i.e., -2 times
the PLL difference.

{phang}
{opt gen(beta_var pll_var)} creates two new variables:
{it:beta_var} to contain the values of the regression coefficient
over which the PLL is evaluated and {it:pll_var} to contain the PLL values.
If {opt gen()} is not specified, the variables are created
with default names of {opt _beta} and {opt _pll}, respectively.

{phang}
{opt difference} computes the PLL function minus the maximized
log likelihood for the model. See also the {cmd:deviance} option. Except
in pathological cases, the resulting values are negative or zero.
Pathological cases denote likelihood functions with multiple maximums
or no maximum.

{phang}
{opt level(#)} specifies the confidence level, as a percentage, for confidence
intervals.  The default is {cmd:level(95)} or as set by
{helpb set level}.

{phang}
{opt range(#1 #2)} with syntax 1 evaluates the PLL function
over {it:#1} <= beta <= {it:#2}, where beta is the regression coefficient
for {it:xvarname}. The default is for {it:#1} and {it:#2} to be the
confidence limits for beta defined by the option {cmd:level()} and
the usual assumption of a normal distribution for beta_hat, the
maximum likelihood estimate of beta.

{phang}
{opt range(#1 #2)} with syntax 2 is required, and it evaluates the PLL
function over {it:#1} <= {cmd:X} <= {it:#2}, where {cmd:X} is the nonlinear
parameter of interest. {opt pllf} also seeks the MLE of {cmd:X}, but if the
values of {it:#1 #2} are ill-chosen or the PLL function behaves badly, it
may fail to find the MLE or give an inaccurate estimate.  The most
satisfactory situation is when the MLE lies between {it:#1} and {it:#2}, and
this may be judged from the plot of the PLL function. 
Particularly with large sample sizes, the PLL function is often approximately
quadratic with one maximum.

{phang}
{opt maxcost(#)} sets an upper limit of 2 x {it:#} on the number of additional
evaluations of the PLL when searching for the PLL-based confidence limits.
You should rarely, if ever, need this option. {cmd:maxcost()} prevents 
the program from cycling forever when trying to find confidence limits
in pathological cases (see the {opt difference} option). The default {it:#} is
{cmd:n()}/2.

{phang}
{opt n(#)} evaluates the PLL function at {it:#} equally spaced points.
The default is {cmd:n(100)}.

{phang}
{cmd:noci} suppresses calculation of the PLL-based confidence limits.

{phang}
{opt nodots} suppresses dots. By default, a program displays a dot
at each evaluation of the PLL.

{phang}
{opt nograph} suppresses the line plot of the results.

{phang}
{opt gropt(cline_options twoway_options)} supplies graph 
options to enhance the plot of the PLL (or a transformation of it)
against beta or {cmd:X}. The default graph is a line plot ({help twoway line})
showing the PLL-based confidence interval for beta as vertical lines
parallel to the y axis and the corresponding PLL value (or a
transformation of it) as a horizontal line parallel to the x axis.
Appropriate linear transformation of the PLL is applied when the
{cmd:deviance} or {cmd:difference} option is specified.  For more on
these options, see {help cline_options:{it:cline_options}} and 
{help twoway_options:{it:twoway_options}}.

{phang}
{opt levline(cline_options)} specifies the rendition of the horizontal
line showing the profile likelihood at the confidence level for the the
profile-likelihood-based CI.  See {help cline_options:{it:cline_options}}.

{phang}
{opt cilines(cline_options)} specifies the rendition of the vertical
lines representing the bounds of the profile-likelihood-based confidence
interval (CI).  See {help cline_options:{it:cline_options}}.

{phang}
{opt placeholder(string)} defines the placeholder
character(s) used in syntax 2. Spaces or other punctuation
characters are not allowed. The default {it:string} is {cmd:X}
(capital).

{phang}
{it:regression_cmd_options} may be any of the options appropriate to
{it:regression_cmd}.


{title:Remarks}

{pstd}
The PLL function is used for two purposes: (1) to estimate likelihood-based
confidence intervals for parameters and (2) to study the behavior of the
likelihood function in pathological situations, i.e., when there is no
unique maximum or no maximum at all. Departure of the shape of the
PLL function from that of a quadratic indicates nonnormality in the 
distribution of the estimate.

{pstd}
Sometimes, the MLE cannot be found at some values of the parameter
being profiled. In those cases, the maximization continues by default for
16,000 iterations, and that can take a long time. If the program appears
to "freeze" in this way, it is best to halt it by pressing Ctrl/Break. Then
restart it with a more suitable range of values (see the {cmd:range()}
option).

{pstd}
The pseudo-standard error of beta or {cmd:X} is computed as upper PLL
confidence limit minus lower PLL confidence limit, divided by twice t, where t
is the appropriate quantile of the t or normal distribution used in
calculating normal-based confidence limits. When the sampling distribution of
the parameter of interest is close to normal, the usual standard error and the
pseudo-standard error will be approximately equal.


{title:Examples}

{phang}Syntax 1

{phang}{cmd:. pllf stcox x1 x4a x5e x6 hormon, profile(x5e) range(-3 -1)}

{phang}{cmd:. pllf stpm x1 x4a x5e x6 hormon, df(2) scale(h) gen(X Y) profile(x1)}

{phang}{cmd:. pllf streg x1 x4a x5e x6 hormon, distribution(weibull) profile([ln_p]_cons) n(50)}

{phang}{cmd:. pllf streg x1 x4a x5e x6 hormon, distribution(weibull) ancillary(x4b) profile([ln_p]x4b) deviance difference n(20)}


{phang}Syntax 2

{phang}{cmd:. pllf logit y x1 X, formula(exp(-X*x2)) range(.05 .25)}


{title:Saved results}

{pstd}
Entries in which only beta is mentioned apply only to syntax 1, otherwise to
both syntaxes. {cmd:pllf} saves the following in {cmd:r()}:

{synoptset 15 tabbed}{...}
{p2col 5 15 19 2: Scalars}{p_end}
{synopt:{cmd:r(n)}}number of observations in the estimation sample{p_end}
{synopt:{cmd:r(b)}}MLE of beta or {cmd:X}{p_end}
{synopt:{cmd:r(se)}}usual standard error of beta{p_end}
{synopt:{cmd:r(pse)}}pseudo-standard error of beta or {cmd:X}{p_end}
{synopt:{cmd:r(n_llci)}}lower normal-based confidence limit for beta{p_end}
{synopt:{cmd:r(n_ulci)}}upper normal-based confidence limit for beta{p_end}
{synopt:{cmd:r(l_llci)}}lower PLL-based confidence limit for beta or {cmd:X}{p_end}
{synopt:{cmd:r(l_ulci)}}upper PLL-based confidence limit for beta or {cmd:X}{p_end}
{synopt:{cmd:r(ll)}}maximized log likelihood{p_end}
{synopt:{cmd:r(ll_limit)}}value of log likelihood for likelihood-based CI calculation{p_end}
{synopt:{cmd:r(cost)}}"cost" of evaluating PLL-based confidence limits{p_end}
{p2colreset}{...}


{title:References}

{phang}
Pearce, M. S. 2000. Profile likelihood confidence intervals
for explanatory variables in logistic regression. 
{it:Stata Technical Bulletin} 56: 45-47.
Reprinted in {it:Stata Technical Bulletin Reprints}, vol. 10, pp. 211-214.

{phang}
Venzon, D. J., and S. H. Moolgavkar. 1988. A method for computing
profile-likelihood-based confidence intervals. 
{it:Applied Statistics} 37: 87-94.


{title:Author}

{pstd}
Patrick Royston{break}
MRC Clinical Trials Unit, London NW1 2DA, UK.

{pstd}Email: {browse "mailto:pr@ctu.mrc.ac.uk":patrick.royston@ctu.mrc.ac.uk}
{p_end}
